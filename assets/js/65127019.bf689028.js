"use strict";(self.webpackChunkdisnake_guide=self.webpackChunkdisnake_guide||[]).push([[177],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=i.createContext({}),l=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=l(e.components);return i.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,p=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),m=l(n),d=o,h=m["".concat(p,".").concat(d)]||m[d]||u[d]||s;return n?i.createElement(h,r(r({ref:t},c),{},{components:n})):i.createElement(h,r({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=m;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a.mdxType="string"==typeof e?e:o,r[1]=a;for(var l=2;l<s;l++)r[l]=n[l];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1748:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var i=n(7462),o=(n(7294),n(3905));const s={description:"Add premium features to your bot."},r="Monetization",a={unversionedId:"popular-topics/monetization",id:"popular-topics/monetization",title:"Monetization",description:"Add premium features to your bot.",source:"@site/docs/popular-topics/monetization.mdx",sourceDirName:"popular-topics",slug:"/popular-topics/monetization",permalink:"/popular-topics/monetization",draft:!1,editUrl:"https://github.com/DisnakeDev/guide/edit/main/guide/docs/popular-topics/monetization.mdx",tags:[],version:"current",lastUpdatedBy:"vi",lastUpdatedAt:1737559004,formattedLastUpdatedAt:"Jan 22, 2025",frontMatter:{description:"Add premium features to your bot."},sidebar:"guideSidebar",previous:{title:"Gateway Intents",permalink:"/popular-topics/intents"},next:{title:"Frequently Asked Questions",permalink:"/faq"}},p={},l=[{value:"Initial setup",id:"initial-setup",level:2},{value:"Entitlements",id:"entitlements",level:2},{value:"Premium interactions",id:"premium-interactions",level:3},{value:"Events",id:"events",level:3},{value:"Subscriptions",id:"subscriptions",level:2},{value:"Testing subscriptions",id:"testing-subscriptions",level:3},{value:"One-time purchases",id:"one-time-purchases",level:2},{value:"Testing one-time purchases",id:"testing-one-time-purchases",level:3}],c=(u="DocsLink",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var u;const m={toc:l};function d(e){let{components:t,...s}=e;return(0,o.kt)("wrapper",(0,i.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"monetization"},"Monetization"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Monetization is limited to ",(0,o.kt)("strong",{parentName:"p"},"verified")," apps/bots.")),(0,o.kt)("p",null,"Premium Apps offer developers the ability to monetize their application through either ",(0,o.kt)("strong",{parentName:"p"},"monthly recurring subscriptions")," or ",(0,o.kt)("strong",{parentName:"p"},"one-time purchases"),", natively on Discord.\nThis allows you to e.g. limit specific commands or other functionality to premium users/guilds."),(0,o.kt)("p",null,"Not all applications are eligible - your app must be verified, part of a developer team, and use ",(0,o.kt)("a",{parentName:"p",href:"/interactions/slash-commands"},"slash commands")," or the privileged ",(0,o.kt)("inlineCode",{parentName:"p"},"Message Content")," intent, among other things."),(0,o.kt)("h2",{id:"initial-setup"},"Initial setup"),(0,o.kt)("p",null,"To get started, visit the ",(0,o.kt)("a",{parentName:"p",href:"https://discord.com/developers/docs/monetization/overview"},"official documentation")," to see the full list of requirements, and configure your app for monetization by following the steps outlined there."),(0,o.kt)("h2",{id:"entitlements"},"Entitlements"),(0,o.kt)("p",null,"Entitlements represent access to the premium functionality of your application. These can be granted to users or guilds, depending on the type of SKU you set up in the previous step."),(0,o.kt)("p",null,"In ",(0,o.kt)("a",{parentName:"p",href:"/interactions"},"interactions")," (e.g. slash commands), the entitlements for the invoking user/guild are easily accessible using ",(0,o.kt)(c,{reference:"disnake.Interaction.entitlements",mdxType:"DocsLink"}),"."),(0,o.kt)("p",null,"Outside of interactions, you can fetch entitlements using ",(0,o.kt)(c,{reference:"disnake.Client.entitlements",mdxType:"DocsLink"},"Client.entitlements()"),", optionally only fetching entitlements of a specific user or guild. Note that this may include expired entitlements, unless you pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"exclude_ended")," parameter."),(0,o.kt)("p",null,"To check whether an entitlement is still active, you can use ",(0,o.kt)(c,{reference:"disnake.Entitlement.is_active",mdxType:"DocsLink"},"Entitlement.is_active()"),"."),(0,o.kt)("h3",{id:"premium-interactions"},"Premium interactions"),(0,o.kt)("p",null,'This is usually the main way to provide premium functionality.\nCommands are not preemptively marked as "premium-only" - instead, you may respond with a premium button, prompting users to upgrade/purchase a specific SKU:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'sku_id = 1234432112344321\n\n\n@bot.slash_command()\nasync def command(inter: disnake.ApplicationCommandInteraction):\n    if not any(e.sku_id == sku_id for e in inter.entitlements):\n        await inter.response.send(\n            content="Upgrade now to get access to this feature!",\n            components=[disnake.ui.Button(sku_id=sku_id)],\n        )\n        return  # skip remaining code\n    ...\n')),(0,o.kt)("p",{align:"center"},(0,o.kt)("img",{src:n(5347).Z,alt:"Premium Interaction Response Type",width:"75%"})),(0,o.kt)("h3",{id:"events"},"Events"),(0,o.kt)("p",null,"Whenever users make a purchase in your app, you will receive an ",(0,o.kt)(c,{reference:"disnake.on_entitlement_create",mdxType:"DocsLink"})," event. For subscriptions, entitlements are granted indefinitely until the user decides to cancel their subscription, in which case you will receive a ",(0,o.kt)(c,{reference:"disnake.on_entitlement_update",mdxType:"DocsLink"})," event when the subscription ends.",(0,o.kt)("br",{parentName:"p"}),"\n","Note that entitlement events are not emitted immediately when a subscription is canceled, only at the end of the subscription period. In this case, the entitlement's ",(0,o.kt)(c,{reference:"disnake.Entitlement.ends_at",mdxType:"DocsLink"},"ends_at")," attribute reflects the date indicating when the subscription (and entitlement) ended."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"While an ",(0,o.kt)(c,{reference:"disnake.on_entitlement_delete",mdxType:"DocsLink"})," event also exists, it will not fire when a subscription expires; it only occurs e.g. in case of refunds or due to manual removal by Discord.")),(0,o.kt)("h2",{id:"subscriptions"},"Subscriptions"),(0,o.kt)("p",null,"Subscriptions are used for products with recurring monthly payments. These should not be used to determine access to premium features, they are only meant for lifecycle management purposes."),(0,o.kt)("p",null,"Similarly to entitlements, you will receive an ",(0,o.kt)(c,{reference:"disnake.on_subscription_create",mdxType:"DocsLink"})," event whenever a subscription is created. An ",(0,o.kt)(c,{reference:"disnake.on_subscription_update",mdxType:"DocsLink"})," event is emitted when a user cancels their subscription; canceled subscriptions remain valid until the end of the subscription period. Further details about subscription lifecycles can be found in the ",(0,o.kt)("a",{parentName:"p",href:"https://discord.com/developers/docs/monetization/implementing-app-subscriptions#supporting-subscriptions"},"official documentation"),"."),(0,o.kt)("p",null,"To obtain the subscriptions of a user to a particular SKU, you can use ",(0,o.kt)(c,{reference:"disnake.SKU.subscriptions",mdxType:"DocsLink"}),"."),(0,o.kt)("h3",{id:"testing-subscriptions"},"Testing subscriptions"),(0,o.kt)("p",null,"For subscription SKUs, you can create test entitlements using ",(0,o.kt)(c,{reference:"disnake.Client.create_entitlement",mdxType:"DocsLink"})," and delete them using ",(0,o.kt)(c,{reference:"disnake.Entitlement.delete",mdxType:"DocsLink"}),", which allows you to test your implementation in various subscription states. These entitlements do not expire and therefore have no start/end date."),(0,o.kt)("p",null,"If you want to test the full payment flow, you can go through the same upgrade steps as any other user of your application would - all members of the app's associated team automatically receive a 100% discount on the subscription. Note that you cannot delete these entitlements, unlike the test entitlements mentioned before."),(0,o.kt)("h2",{id:"one-time-purchases"},"One-time purchases"),(0,o.kt)("p",null,"One-time purchases can be durable (i.e. permanent) or consumable.",(0,o.kt)("br",{parentName:"p"}),"\n","Just like subscriptions, access to these items is represented by entitlements, which you can receive in entitlement events or interactions."),(0,o.kt)("p",null,"Users may only have one unconsumed entitlement for an SKU at a time. To consume an entitlement, use ",(0,o.kt)(c,{reference:"disnake.Entitlement.consume",mdxType:"DocsLink"})," and process/store the state of the item in your application where applicable."),(0,o.kt)("p",null,"For further lifecycle details and other considerations, visit the ",(0,o.kt)("a",{parentName:"p",href:"https://discord.com/developers/docs/monetization/implementing-one-time-purchases#how-onetime-purchases-work"},"official documentation")," for one-time purchases."),(0,o.kt)("h3",{id:"testing-one-time-purchases"},"Testing one-time purchases"),(0,o.kt)("p",null,"Unlike subscriptions, one-time purchases may only be tested through the Application Test Mode, not via test entitlements.",(0,o.kt)("br",{parentName:"p"}),"\n","To test one-time purchases without being charged, ",(0,o.kt)("a",{parentName:"p",href:"https://discord.com/developers/docs/monetization/implementing-one-time-purchases#using-application-test-mode"},"enable Application Test Mode")," for your app and visit the app's store page.\nEntitlements tied to one-time purchases made this way will have a ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," of ",(0,o.kt)(c,{reference:"disnake.EntitlementType.test_mode_purchase",mdxType:"DocsLink"},"test_mode_purchase"),"."))}d.isMDXComponent=!0},5347:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/monetization-response-f105a132b1c27436f864766020d7e062.png"}}]);